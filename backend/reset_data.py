#!/usr/bin/env python3
"""
Script para limpar todos os dados cadastrados mantendo a estrutura do banco.

ATEN√á√ÉO: Este script deleta TODOS os dados mas mant√©m:
- Estrutura das tabelas (schema)
- Migrations aplicadas
- Configura√ß√£o do sistema

Uso:
    python reset_data.py

ou com confirma√ß√£o autom√°tica:
    python reset_data.py --yes
"""

import sys
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent))

from sqlalchemy import text
from app.database import SessionLocal, engine
from app.models import (
    Organization, AISystem, AIRisk, Control, Evidence, 
    FRIA, Incident, Oversight, PMM, OnboardingData,
    DocumentApproval, ModelVersion
)


def confirm_reset():
    """Pedir confirma√ß√£o do usu√°rio."""
    if '--yes' in sys.argv or '-y' in sys.argv:
        return True
    
    print("\n" + "="*60)
    print("‚ö†Ô∏è  ATEN√á√ÉO: RESET COMPLETO DE DADOS")
    print("="*60)
    print("\nEste script ir√° DELETAR todos os dados:")
    print("  - Todas as organiza√ß√µes")
    print("  - Todos os sistemas AI")
    print("  - Todos os riscos")
    print("  - Todos os controles")
    print("  - Todas as evid√™ncias")
    print("  - Todos os FRIAs")
    print("  - Todos os incidentes")
    print("  - Todas as aprova√ß√µes de documentos")
    print("  - Todas as vers√µes de modelo")
    print("  - Todos os dados de onboarding")
    print("\n‚ùó A estrutura do banco (tabelas) ser√° MANTIDA")
    print("‚ùó As migrations N√ÉO ser√£o revertidas")
    print("\n" + "="*60)
    
    response = input("\nDeseja continuar? Digite 'SIM' para confirmar: ")
    return response.upper() == 'SIM'


def delete_generated_documents():
    """Deletar documentos gerados."""
    docs_dir = Path("generated_documents")
    
    if docs_dir.exists():
        print("\nüìÅ Deletando documentos gerados...")
        import shutil
        shutil.rmtree(docs_dir)
        print("   ‚úÖ Documentos deletados")
    else:
        print("\nüìÅ Nenhum documento gerado encontrado")


def reset_database():
    """Limpar todos os dados do banco."""
    db = SessionLocal()
    
    try:
        print("\nüóÑÔ∏è  Iniciando limpeza do banco de dados...\n")
        
        # Ordem importante: deletar tabelas dependentes primeiro
        tables_to_clear = [
            # Documentos e aprova√ß√µes
            ("DocumentApproval", DocumentApproval, "aprova√ß√µes de documentos"),
            
            # Model versions
            ("ModelVersion", ModelVersion, "vers√µes de modelo"),
            
            # Dados de compliance
            ("Evidence", Evidence, "evid√™ncias"),
            ("Control", Control, "controles"),
            ("AIRisk", AIRisk, "riscos"),
            ("FRIA", FRIA, "FRIAs"),
            ("Incident", Incident, "incidentes"),
            ("Oversight", Oversight, "configura√ß√µes de oversight"),
            ("PMM", PMM, "configura√ß√µes de PMM"),
            ("OnboardingData", OnboardingData, "dados de onboarding"),
            
            # Sistemas (depois de todas as depend√™ncias)
            ("AISystem", AISystem, "sistemas AI"),
            
            # Organiza√ß√µes (por √∫ltimo)
            ("Organization", Organization, "organiza√ß√µes"),
        ]
        
        total_deleted = 0
        
        for table_name, model, description in tables_to_clear:
            try:
                count = db.query(model).count()
                if count > 0:
                    db.query(model).delete()
                    db.commit()
                    print(f"   ‚úÖ {count:3d} {description} deletado(s)")
                    total_deleted += count
                else:
                    print(f"   ‚äò  0   {description} (j√° vazio)")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erro ao deletar {description}: {e}")
                db.rollback()
        
        # Reset auto-increment counters (SQLite specific)
        print("\nüîÑ Resetando contadores de ID...")
        try:
            db.execute(text("DELETE FROM sqlite_sequence"))
            db.commit()
            print("   ‚úÖ Contadores resetados")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Aviso: {e}")
        
        print("\n" + "="*60)
        print(f"‚úÖ TOTAL: {total_deleted} registros deletados com sucesso!")
        print("="*60)
        
    except Exception as e:
        print(f"\n‚ùå ERRO durante limpeza: {e}")
        db.rollback()
        return False
    finally:
        db.close()
    
    return True


def verify_clean():
    """Verificar se o banco est√° limpo."""
    db = SessionLocal()
    
    try:
        print("\nüîç Verificando limpeza...\n")
        
        checks = [
            ("Organiza√ß√µes", Organization),
            ("Sistemas AI", AISystem),
            ("Riscos", AIRisk),
            ("Controles", Control),
            ("Evid√™ncias", Evidence),
            ("FRIAs", FRIA),
            ("Incidentes", Incident),
            ("Aprova√ß√µes", DocumentApproval),
            ("Vers√µes Modelo", ModelVersion),
        ]
        
        all_clean = True
        
        for name, model in checks:
            count = db.query(model).count()
            if count == 0:
                print(f"   ‚úÖ {name:20s}: 0 registros")
            else:
                print(f"   ‚ùå {name:20s}: {count} registros (AINDA EXISTEM!)")
                all_clean = False
        
        print()
        return all_clean
        
    finally:
        db.close()


def main():
    """Fun√ß√£o principal."""
    print("\n" + "üßπ " * 20)
    print("   AIMS STUDIO - RESET DE DADOS")
    print("üßπ " * 20)
    
    # Pedir confirma√ß√£o
    if not confirm_reset():
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        return 1
    
    print("\nüöÄ Iniciando reset...\n")
    
    # 1. Deletar documentos gerados
    delete_generated_documents()
    
    # 2. Limpar banco de dados
    success = reset_database()
    
    if not success:
        print("\n‚ùå Reset falhou. Verifique os erros acima.")
        return 1
    
    # 3. Verificar limpeza
    if verify_clean():
        print("\n" + "="*60)
        print("üéâ RESET COMPLETO COM SUCESSO!")
        print("="*60)
        print("\n‚úÖ Banco de dados limpo")
        print("‚úÖ Documentos removidos")
        print("‚úÖ Estrutura mantida")
        print("‚úÖ Pronto para novo teste\n")
        
        print("üí° Pr√≥ximos passos:")
        print("   1. Acesse: http://localhost:3000")
        print("   2. Limpe localStorage do navegador (F12 ‚Üí Console):")
        print("      localStorage.clear(); location.reload()")
        print("   3. Comece novo onboarding\n")
        
        return 0
    else:
        print("\n‚ö†Ô∏è  Algumas tabelas ainda t√™m dados. Verifique acima.")
        return 1


if __name__ == "__main__":
    sys.exit(main())

