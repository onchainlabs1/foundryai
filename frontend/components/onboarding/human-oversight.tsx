'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { 
  Users, 
  AlertTriangle, 
  Clock, 
  Shield, 
  FileText, 
  CheckCircle,
  Edit3
} from 'lucide-react'

const oversightSchema = z.object({
  oversightMethod: z.string().min(1, 'Oversight method is required'),
  escalationRules: z.string().min(1, 'Escalation rules are required'),
  appealsProcess: z.string().min(1, 'Appeals process is required'),
  appealsSLA: z.string().min(1, 'Appeals SLA is required'),
  changeApprovalRoles: z.array(z.string()).min(1, 'At least one approval role is required'),
  hasEthicsCommittee: z.boolean(),
  staffTrainingPlan: z.string().min(1, 'Staff training plan is required'),
  internalCommunicationPlan: z.string().min(1, 'Internal communication plan is required'),
  externalAIDisclosure: z.boolean()
})

type OversightFormData = z.infer<typeof oversightSchema>

interface HumanOversightProps {
  data?: any
  onUpdate: (data: any) => void
}

const oversightMethods = [
  'Human-in-the-loop (HITL)',
  'Human-on-the-loop (HOTL)',
  'Human-in-command',
  'Automated with human oversight',
  'Hybrid approach'
]

const appealsSLAs = [
  '24 hours',
  '48 hours',
  '72 hours',
  '1 week',
  '2 weeks',
  'Custom'
]

const approvalRoles = [
  'AI Ethics Officer',
  'Technical Lead',
  'Legal Counsel',
  'Risk Manager',
  'Product Manager',
  'Data Protection Officer',
  'Executive Sponsor',
  'External Auditor'
]

export default function HumanOversight({ data, onUpdate }: HumanOversightProps) {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showTemplatePreview, setShowTemplatePreview] = useState(false)
  
  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isValid }
  } = useForm<OversightFormData>({
    resolver: zodResolver(oversightSchema),
    defaultValues: {
      oversightMethod: data?.oversightMethod || '',
      escalationRules: data?.escalationRules || '',
      appealsProcess: data?.appealsProcess || '',
      appealsSLA: data?.appealsSLA || '',
      changeApprovalRoles: data?.changeApprovalRoles || [],
      hasEthicsCommittee: data?.hasEthicsCommittee || false,
      staffTrainingPlan: data?.staffTrainingPlan || '',
      internalCommunicationPlan: data?.internalCommunicationPlan || '',
      externalAIDisclosure: data?.externalAIDisclosure || false
    }
  })

  const changeApprovalRoles = watch('changeApprovalRoles')
  const hasEthicsCommittee = watch('hasEthicsCommittee')
  const externalAIDisclosure = watch('externalAIDisclosure')

  const onSubmit = async (formData: OversightFormData) => {
    setIsSubmitting(true)
    try {
      onUpdate({ oversight: formData })
    } finally {
      setIsSubmitting(false)
    }
  }

  const toggleApprovalRole = (role: string) => {
    const current = changeApprovalRoles || []
    if (current.includes(role)) {
      setValue('changeApprovalRoles', current.filter(r => r !== role))
    } else {
      setValue('changeApprovalRoles', [...current, role])
    }
  }

  const generateOversightSOP = () => {
    const formData = watch()
    return `# Human Oversight Standard Operating Procedure

## Oversight Method
${formData.oversightMethod || 'Not specified'}

## Escalation Rules
${formData.escalationRules || 'Not defined'}

## Appeals Process
${formData.appealsProcess || 'Not defined'}

## Appeals SLA
${formData.appealsSLA || 'Not specified'}

## Change Approval Roles
${formData.changeApprovalRoles?.map(role => `- ${role}`).join('\n') || 'No roles specified'}

## Ethics Committee
${formData.hasEthicsCommittee ? 'Yes - Ethics/Risk Committee in place' : 'No - Ethics/Risk Committee not established'}

## Staff Training Plan
${formData.staffTrainingPlan || 'Not defined'}

## Internal Communication Plan
${formData.internalCommunicationPlan || 'Not defined'}

## External AI Disclosure
${formData.externalAIDisclosure ? 'Yes - External disclosure required' : 'No - External disclosure not required'}

---
*Generated by AIMS Readiness Onboarding Wizard*`
  }

  const generateAppealsFlow = () => {
    const formData = watch()
    return `# Appeals Process Flow

## Appeals Process
${formData.appealsProcess || 'Not defined'}

## SLA Requirements
- **Response Time**: ${formData.appealsSLA || 'Not specified'}
- **Escalation**: ${formData.escalationRules || 'Not defined'}

## Approval Roles
${formData.changeApprovalRoles?.map(role => `- ${role}`).join('\n') || 'No roles specified'}

## Communication
${formData.internalCommunicationPlan || 'Not defined'}

---
*Generated by AIMS Readiness Onboarding Wizard*`
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Oversight Method */}
      <Card className="bg-white/50 dark:bg-gray-800/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="w-5 h-5 text-blue-500" />
            Human Oversight Method
          </CardTitle>
          <CardDescription>
            Define how human oversight will be implemented in your AI systems
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Oversight Method *</Label>
            <Select onValueChange={(value) => setValue('oversightMethod', value)}>
              <SelectTrigger className="bg-white/70 dark:bg-gray-700/70">
                <SelectValue placeholder="Select oversight method" />
              </SelectTrigger>
              <SelectContent>
                {oversightMethods.map(method => (
                  <SelectItem key={method} value={method}>{method}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.oversightMethod && (
              <p className="text-sm text-red-500">{errors.oversightMethod.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label>Escalation Rules *</Label>
            <Textarea
              {...register('escalationRules')}
              placeholder="Describe the rules for escalating issues or concerns"
              rows={3}
              className="bg-white/70 dark:bg-gray-700/70"
            />
            {errors.escalationRules && (
              <p className="text-sm text-red-500">{errors.escalationRules.message}</p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Appeals Process */}
      <Card className="bg-white/50 dark:bg-gray-800/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <AlertTriangle className="w-5 h-5 text-orange-500" />
            Appeals Process
          </CardTitle>
          <CardDescription>
            Define how users can appeal AI system decisions
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Appeals Process *</Label>
            <Textarea
              {...register('appealsProcess')}
              placeholder="Describe the process for users to appeal AI system decisions"
              rows={3}
              className="bg-white/70 dark:bg-gray-700/70"
            />
            {errors.appealsProcess && (
              <p className="text-sm text-red-500">{errors.appealsProcess.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label className="flex items-center gap-2">
              <Clock className="w-4 h-4" />
              Appeals SLA *
            </Label>
            <Select onValueChange={(value) => setValue('appealsSLA', value)}>
              <SelectTrigger className="bg-white/70 dark:bg-gray-700/70">
                <SelectValue placeholder="Select SLA timeframe" />
              </SelectTrigger>
              <SelectContent>
                {appealsSLAs.map(sla => (
                  <SelectItem key={sla} value={sla}>{sla}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.appealsSLA && (
              <p className="text-sm text-red-500">{errors.appealsSLA.message}</p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Change Approval Roles */}
      <Card className="bg-white/50 dark:bg-gray-800/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-500" />
            Change Approval Roles
          </CardTitle>
          <CardDescription>
            Define who can approve changes to AI systems
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {approvalRoles.map(role => (
              <div key={role} className="flex items-center space-x-2">
                <Switch
                  id={`role-${role}`}
                  checked={changeApprovalRoles?.includes(role) || false}
                  onCheckedChange={() => toggleApprovalRole(role)}
                />
                <Label htmlFor={`role-${role}`} className="text-sm">
                  {role}
                </Label>
              </div>
            ))}
          </div>
          {errors.changeApprovalRoles && (
            <p className="text-sm text-red-500">{errors.changeApprovalRoles.message}</p>
          )}
        </CardContent>
      </Card>

      {/* Governance Structure */}
      <Card className="bg-white/50 dark:bg-gray-800/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="w-5 h-5 text-purple-500" />
            Governance Structure
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Switch
              id="hasEthicsCommittee"
              checked={hasEthicsCommittee}
              onCheckedChange={(checked) => setValue('hasEthicsCommittee', checked)}
            />
            <Label htmlFor="hasEthicsCommittee" className="flex items-center gap-2">
              <Shield className="w-4 h-4" />
              Ethics / Risk Committee in place
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <Switch
              id="externalAIDisclosure"
              checked={externalAIDisclosure}
              onCheckedChange={(checked) => setValue('externalAIDisclosure', checked)}
            />
            <Label htmlFor="externalAIDisclosure" className="flex items-center gap-2">
              <FileText className="w-4 h-4" />
              External AI Disclosure required
            </Label>
          </div>
        </CardContent>
      </Card>

      {/* Training & Communication */}
      <Card className="bg-white/50 dark:bg-gray-800/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="w-5 h-5 text-indigo-500" />
            Training & Communication
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Staff Training Plan *</Label>
            <Textarea
              {...register('staffTrainingPlan')}
              placeholder="Describe the training plan for staff involved in AI systems"
              rows={3}
              className="bg-white/70 dark:bg-gray-700/70"
            />
            {errors.staffTrainingPlan && (
              <p className="text-sm text-red-500">{errors.staffTrainingPlan.message}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label>Internal Communication Plan *</Label>
            <Textarea
              {...register('internalCommunicationPlan')}
              placeholder="Describe how AI governance will be communicated internally"
              rows={3}
              className="bg-white/70 dark:bg-gray-700/70"
            />
            {errors.internalCommunicationPlan && (
              <p className="text-sm text-red-500">{errors.internalCommunicationPlan.message}</p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Template Preview */}
      <Card className="bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800">
        <CardHeader>
          <CardTitle className="text-sm text-blue-800 dark:text-blue-200 flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Template Preview
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="space-y-3">
            <div className="flex gap-2">
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => setShowTemplatePreview(!showTemplatePreview)}
                className="flex items-center gap-2"
              >
                <Edit3 className="w-4 h-4" />
                {showTemplatePreview ? 'Hide' : 'Show'} Templates
              </Button>
            </div>
            
            {showTemplatePreview && (
              <div className="space-y-4">
                <div>
                  <h4 className="font-medium text-sm mb-2">Oversight SOP Template:</h4>
                  <pre className="text-xs bg-white/70 dark:bg-gray-800/70 p-3 rounded border overflow-auto max-h-40">
                    {generateOversightSOP()}
                  </pre>
                </div>
                <div>
                  <h4 className="font-medium text-sm mb-2">Appeals Flow Template:</h4>
                  <pre className="text-xs bg-white/70 dark:bg-gray-800/70 p-3 rounded border overflow-auto max-h-40">
                    {generateAppealsFlow()}
                  </pre>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* ISO Coverage Info */}
      <Card className="bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-800">
        <CardHeader className="pb-3">
          <CardTitle className="text-sm text-green-800 dark:text-green-200">
            📋 ISO/IEC 42001 Coverage
          </CardTitle>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="text-sm text-green-700 dark:text-green-300">
            <p className="mb-2">This step covers:</p>
            <ul className="list-disc list-inside space-y-1">
              <li>Clause 6.1: Human oversight and human-in-the-loop</li>
              <li>Clause 6.2: Human oversight and human-on-the-loop</li>
              <li>Clause 6.3: Human oversight and human-in-command</li>
              <li>Clause 7.1: Competence and awareness</li>
              <li>Clause 7.2: Communication</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      <div className="flex justify-end">
        <Button
          type="submit"
          disabled={!isValid || isSubmitting}
          className="bg-blue-600 hover:bg-blue-700"
        >
          {isSubmitting ? 'Saving...' : 'Save & Continue'}
        </Button>
      </div>
    </form>
  )
}
