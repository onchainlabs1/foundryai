'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { 
  Users, 
  AlertTriangle, 
  Clock, 
  Shield, 
  FileText, 
  CheckCircle,
  Edit3,
  ArrowRight,
  UserCheck,
  Gavel
} from 'lucide-react'

const oversightSchema = z.object({
  oversightMethod: z.string().min(1, 'Oversight method is required'),
  escalationRules: z.string().optional(),
  appealsProcess: z.string().optional(),
  appealsSLA: z.string().optional(),
  appealsResponsibleEmail: z.string().email().optional().or(z.literal('')),
  changeApprovalRoles: z.array(z.string()).optional(),
  hasEthicsCommittee: z.boolean(),
  manualOverride: z.boolean().optional(),
  staffTrainingPlan: z.string().optional(),
  internalCommunicationPlan: z.string().optional(),
  externalAIDisclosure: z.boolean()
})

type OversightFormData = z.infer<typeof oversightSchema>

interface HumanOversightProps {
  data?: any
  onUpdate: (data: any) => void
}

const oversightMethods = [
  'Human-in-the-loop (HITL)',
  'Human-on-the-loop (HOTL)',
  'Human-in-command',
  'Automated with human oversight',
  'Hybrid approach'
]

const appealsSLAs = [
  '24 hours',
  '48 hours',
  '72 hours',
  '1 week',
  '2 weeks',
  'Custom'
]

const approvalRoles = [
  'AI Ethics Officer',
  'Technical Lead',
  'Legal Counsel',
  'Risk Manager',
  'Product Manager',
  'Data Protection Officer',
  'Executive Sponsor',
  'External Auditor'
]

export default function HumanOversight({ data, onUpdate }: HumanOversightProps) {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showTemplatePreview, setShowTemplatePreview] = useState(false)
  
  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors, isValid }
  } = useForm<OversightFormData>({
    resolver: zodResolver(oversightSchema),
    defaultValues: {
      oversightMethod: data?.oversightMethod || '',
      escalationRules: data?.escalationRules || '',
      appealsProcess: data?.appealsProcess || '',
      appealsSLA: data?.appealsSLA || '',
      changeApprovalRoles: data?.changeApprovalRoles || [],
      hasEthicsCommittee: data?.hasEthicsCommittee || false,
      staffTrainingPlan: data?.staffTrainingPlan || '',
      internalCommunicationPlan: data?.internalCommunicationPlan || '',
      externalAIDisclosure: data?.externalAIDisclosure || false
    }
  })

  const changeApprovalRoles = watch('changeApprovalRoles')
  const hasEthicsCommittee = watch('hasEthicsCommittee')
  const externalAIDisclosure = watch('externalAIDisclosure')

  const onSubmit = async (formData: OversightFormData) => {
    setIsSubmitting(true)
    try {
      onUpdate({ oversight: formData })
    } finally {
      setIsSubmitting(false)
    }
  }

  const toggleApprovalRole = (role: string) => {
    const current = changeApprovalRoles || []
    if (current.includes(role)) {
      setValue('changeApprovalRoles', current.filter(r => r !== role))
    } else {
      setValue('changeApprovalRoles', [...current, role])
    }
  }

  const generateOversightSOP = () => {
    const formData = watch()
    return `# Human Oversight Standard Operating Procedure

## Oversight Method
${formData.oversightMethod || 'Not specified'}

## Escalation Rules
${formData.escalationRules || 'Not defined'}

## Appeals Process
${formData.appealsProcess || 'Not defined'}

## Appeals SLA
${formData.appealsSLA || 'Not specified'}

## Change Approval Roles
${formData.changeApprovalRoles?.map(role => `- ${role}`).join('\n') || 'No roles specified'}

## Ethics Committee
${formData.hasEthicsCommittee ? 'Yes - Ethics/Risk Committee in place' : 'No - Ethics/Risk Committee not established'}

## Staff Training Plan
${formData.staffTrainingPlan || 'Not defined'}

## Internal Communication Plan
${formData.internalCommunicationPlan || 'Not defined'}

## External AI Disclosure
${formData.externalAIDisclosure ? 'Yes - External disclosure required' : 'No - External disclosure not required'}

---
*Generated by AIMS Readiness Onboarding Wizard*`
  }

  const generateAppealsFlow = () => {
    const formData = watch()
    return `# Appeals Process Flow

## Appeals Process
${formData.appealsProcess || 'Not defined'}

## SLA Requirements
- **Response Time**: ${formData.appealsSLA || 'Not specified'}
- **Escalation**: ${formData.escalationRules || 'Not defined'}

## Approval Roles
${formData.changeApprovalRoles?.map(role => `- ${role}`).join('\n') || 'No roles specified'}

## Communication
${formData.internalCommunicationPlan || 'Not defined'}

---
*Generated by AIMS Readiness Onboarding Wizard*`
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-8"
    >
      {/* Header */}
      <div className="text-center space-y-4">
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
          className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-r from-green-500 to-teal-600 text-white mb-4"
        >
          <Users className="w-8 h-8" />
        </motion.div>
        <h2 className="text-3xl font-bold gradient-text">Human Oversight</h2>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Define human oversight mechanisms and governance structures for your AI systems
        </p>
      </div>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-8">
        {/* Oversight Method */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
        >
          <Card  className="p-6">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-xl">
                <UserCheck className="w-6 h-6 text-blue-500" />
                Human Oversight Method
              </CardTitle>
              <CardDescription className="text-base">
                Define how human oversight will be implemented in your AI systems
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4 }}
                className="space-y-3"
              >
                <Label className="text-sm font-semibold">Oversight Method *</Label>
                <Select onValueChange={(value) => setValue('oversightMethod', value)}>
                  <SelectTrigger className="h-12 bg-background/50 border-border/50 focus:border-primary/50 transition-all duration-300">
                    <SelectValue placeholder="Select oversight method" />
                  </SelectTrigger>
                  <SelectContent>
                    {oversightMethods.map(method => (
                      <SelectItem key={method} value={method}>{method}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.oversightMethod && (
                  <p className="text-sm text-destructive flex items-center gap-1">
                    <span className="w-1 h-1 rounded-full bg-destructive"></span>
                    {errors.oversightMethod.message}
                  </p>
                )}
              </motion.div>

              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="space-y-3"
              >
                <Label className="text-sm font-semibold">Escalation Rules *</Label>
                <Textarea
                  {...register('escalationRules')}
                  placeholder="Describe the rules for escalating issues or concerns"
                  rows={4}
                  className="bg-background/50 border-border/50 focus:border-primary/50 transition-all duration-300 resize-none"
                />
                {errors.escalationRules && (
                  <p className="text-sm text-destructive flex items-center gap-1">
                    <span className="w-1 h-1 rounded-full bg-destructive"></span>
                    {errors.escalationRules.message}
                  </p>
                )}
              </motion.div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Appeals Process */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
        >
          <Card  className="p-6">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-xl">
                <Gavel className="w-6 h-6 text-orange-500" />
                Appeals Process
              </CardTitle>
              <CardDescription className="text-base">
                Define how users can appeal AI system decisions
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.7 }}
                className="space-y-3"
              >
                <Label className="text-sm font-semibold">Appeals Process *</Label>
                <Textarea
                  {...register('appealsProcess')}
                  placeholder="Describe the process for users to appeal AI system decisions"
                  rows={4}
                  className="bg-background/50 border-border/50 focus:border-primary/50 transition-all duration-300 resize-none"
                />
                {errors.appealsProcess && (
                  <p className="text-sm text-destructive flex items-center gap-1">
                    <span className="w-1 h-1 rounded-full bg-destructive"></span>
                    {errors.appealsProcess.message}
                  </p>
                )}
              </motion.div>

              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.8 }}
                className="space-y-3"
              >
                <Label className="flex items-center gap-2 text-sm font-semibold">
                  <Clock className="w-4 h-4 text-primary" />
                  Appeals SLA *
                </Label>
                <Select onValueChange={(value) => setValue('appealsSLA', value)}>
                  <SelectTrigger className="h-12 bg-background/50 border-border/50 focus:border-primary/50 transition-all duration-300">
                    <SelectValue placeholder="Select SLA timeframe" />
                  </SelectTrigger>
                  <SelectContent>
                    {appealsSLAs.map(sla => (
                      <SelectItem key={sla} value={sla}>{sla}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.appealsSLA && (
                  <p className="text-sm text-destructive flex items-center gap-1">
                    <span className="w-1 h-1 rounded-full bg-destructive"></span>
                    {errors.appealsSLA.message}
                  </p>
                )}
              </motion.div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Change Approval Roles */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.9 }}
        >
          <Card  className="p-6">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-xl">
                <CheckCircle className="w-6 h-6 text-green-500" />
                Change Approval Roles
              </CardTitle>
              <CardDescription className="text-base">
                Define who can approve changes to AI systems
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {approvalRoles.map((role, index) => (
                  <motion.div
                    key={role}
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ delay: 1.0 + index * 0.05 }}
                    className="flex items-center space-x-3 p-3 rounded-lg bg-muted/30 border border-border/50 hover:bg-muted/50 transition-all duration-300"
                  >
                    <Switch
                      id={`role-${role}`}
                      checked={changeApprovalRoles?.includes(role) || false}
                      onCheckedChange={() => toggleApprovalRole(role)}
                    />
                    <Label htmlFor={`role-${role}`} className="text-sm font-medium cursor-pointer">
                      {role}
                    </Label>
                  </motion.div>
                ))}
              </div>
              {errors.changeApprovalRoles && (
                <p className="text-sm text-destructive flex items-center gap-1">
                  <span className="w-1 h-1 rounded-full bg-destructive"></span>
                  {errors.changeApprovalRoles.message}
                </p>
              )}
            </CardContent>
          </Card>
        </motion.div>

        {/* Governance Structure */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.1 }}
        >
          <Card  className="p-6">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-xl">
                <Shield className="w-6 h-6 text-purple-500" />
                Governance Structure
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 1.2 }}
                  className="flex items-center space-x-3 p-4 rounded-xl bg-muted/30 border border-border/50"
                >
                  <Switch
                    id="hasEthicsCommittee"
                    checked={hasEthicsCommittee}
                    onCheckedChange={(checked) => setValue('hasEthicsCommittee', checked)}
                  />
                  <div className="flex items-center gap-2">
                    <Shield className="w-4 h-4 text-primary" />
                    <Label htmlFor="hasEthicsCommittee" className="text-sm font-medium">
                      Ethics / Risk Committee in place
                    </Label>
                  </div>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 1.3 }}
                  className="flex items-center space-x-3 p-4 rounded-xl bg-muted/30 border border-border/50"
                >
                  <Switch
                    id="externalAIDisclosure"
                    checked={externalAIDisclosure}
                    onCheckedChange={(checked) => setValue('externalAIDisclosure', checked)}
                  />
                  <div className="flex items-center gap-2">
                    <FileText className="w-4 h-4 text-primary" />
                    <Label htmlFor="externalAIDisclosure" className="text-sm font-medium">
                      External AI Disclosure required
                    </Label>
                  </div>
                </motion.div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Training & Communication */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.4 }}
        >
          <Card  className="p-6">
            <CardHeader className="pb-4">
              <CardTitle className="flex items-center gap-3 text-xl">
                <Users className="w-6 h-6 text-indigo-500" />
                Training & Communication
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 1.5 }}
                className="space-y-3"
              >
                <Label className="text-sm font-semibold">Staff Training Plan *</Label>
                <Textarea
                  {...register('staffTrainingPlan')}
                  placeholder="Describe the training plan for staff involved in AI systems"
                  rows={4}
                  className="bg-background/50 border-border/50 focus:border-primary/50 transition-all duration-300 resize-none"
                />
                {errors.staffTrainingPlan && (
                  <p className="text-sm text-destructive flex items-center gap-1">
                    <span className="w-1 h-1 rounded-full bg-destructive"></span>
                    {errors.staffTrainingPlan.message}
                  </p>
                )}
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 1.6 }}
                className="space-y-3"
              >
                <Label className="text-sm font-semibold">Internal Communication Plan *</Label>
                <Textarea
                  {...register('internalCommunicationPlan')}
                  placeholder="Describe how AI governance will be communicated internally"
                  rows={4}
                  className="bg-background/50 border-border/50 focus:border-primary/50 transition-all duration-300 resize-none"
                />
                {errors.internalCommunicationPlan && (
                  <p className="text-sm text-destructive flex items-center gap-1">
                    <span className="w-1 h-1 rounded-full bg-destructive"></span>
                    {errors.internalCommunicationPlan.message}
                  </p>
                )}
              </motion.div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Template Preview */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.7 }}
        >
          <Card  className="border-primary/20 bg-primary/5">
            <CardHeader className="pb-4">
              <CardTitle className="text-lg text-primary flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Template Preview
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setShowTemplatePreview(!showTemplatePreview)}
                  className="flex items-center gap-2"
                >
                  <Edit3 className="w-4 h-4" />
                  {showTemplatePreview ? 'Hide' : 'Show'} Templates
                </Button>
                
                <AnimatePresence>
                  {showTemplatePreview && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                      className="space-y-4"
                    >
                      <div>
                        <h4 className="font-medium text-sm mb-2">Oversight SOP Template:</h4>
                        <pre className="text-xs bg-background/70 p-4 rounded-lg border border-border/50 overflow-auto max-h-40">
                          {generateOversightSOP()}
                        </pre>
                      </div>
                      <div>
                        <h4 className="font-medium text-sm mb-2">Appeals Flow Template:</h4>
                        <pre className="text-xs bg-background/70 p-4 rounded-lg border border-border/50 overflow-auto max-h-40">
                          {generateAppealsFlow()}
                        </pre>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* ISO Coverage Info */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.8 }}
        >
          <Card  className="border-green-200/50 bg-green-50/50 dark:bg-green-950/20">
            <CardHeader className="pb-4">
              <CardTitle className="text-lg text-green-800 dark:text-green-200">
                📋 ISO/IEC 42001 Coverage
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-sm text-green-700 dark:text-green-300">
                <p className="mb-3 font-medium">This step covers the following ISO/IEC 42001 clauses:</p>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-start gap-2">
                    <Badge variant="secondary" className="text-xs">6.1</Badge>
                    <span>Human oversight and human-in-the-loop</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <Badge variant="secondary" className="text-xs">6.2</Badge>
                    <span>Human oversight and human-on-the-loop</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <Badge variant="secondary" className="text-xs">6.3</Badge>
                    <span>Human oversight and human-in-command</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <Badge variant="secondary" className="text-xs">7.1</Badge>
                    <span>Competence and awareness</span>
                  </div>
                  <div className="flex items-start gap-2">
                    <Badge variant="secondary" className="text-xs">7.2</Badge>
                    <span>Communication</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Submit Button */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 1.9 }}
          className="flex justify-end"
        >
          <Button
            type="submit"
            disabled={!isValid || isSubmitting}
            variant="default"
            size="lg"
            className="min-w-[200px]"
          >
            {isSubmitting ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Saving...
              </>
            ) : (
              <>
                Save & Continue
                <ArrowRight className="w-4 h-4 ml-2" />
              </>
            )}
          </Button>
        </motion.div>
      </form>
    </motion.div>
  )
}
